#!/bin/sh

# Status bar for dwm using xsetroot by Nicklas Rudolfsson
# https://github.com/nirucon
# Dependencies: xorg-xsetroot, alsa-utils, xbacklight, cmus, curl, playerctl, ttf-font-awesome

# Change the appearance of the module identifier
export IDENTIFIER="unicode"

# Change the character(s) used to separate modules
export SEP1=" [ "
export SEP2=" ] "

# Define functions for each module

dwm_alsa() {
    STATUS=$(amixer sget Master | tail -n1 | sed -r "s/.*\[(.*)\]/\1/")
    VOL=$(amixer get Master | tail -n1 | sed -r "s/.*\[(.*)%\].*/\1/")
    if [ "$IDENTIFIER" = "unicode" ]; then
        if [ "$STATUS" = "off" ]; then
            printf "üîá"
        else
            if [ "$VOL" -gt 0 ] && [ "$VOL" -le 33 ]; then
                printf "üîâ %s%%" "$VOL"
            elif [ "$VOL" -gt 33 ] && [ "$VOL" -le 66 ]; then
                printf "üîä %s%%" "$VOL"
            else
                printf "üîä %s%%" "$VOL"
            fi
        fi
    else
        if [ "$STATUS" = "off" ]; then
            printf "MUTE"
        else
            if [ "$VOL" -gt 0 ] && [ "$VOL" -le 33 ]; then
                printf "v: %s%%" "$VOL"
            elif [ "$VOL" -gt 33 ] && [ "$VOL" -le 66 ]; then
                printf "v: %s%%" "$VOL"
            else
                printf "v: %s%%" "$VOL"
            fi
        fi
    fi
}

dwm_backlight() {
    printf "bl: %.0f " "$(xbacklight)"
}

dwm_battery1() {
    CHARGE=$(cat /sys/class/power_supply/BAT1/capacity)
    STATUS=$(cat /sys/class/power_supply/BAT1/status)
    if [ "$IDENTIFIER" = "unicode" ]; then
        if [ "$STATUS" = "Charging" ]; then
            printf "üîã %s%% (üîº) " "$CHARGE"
        else
            printf "üîã %s%% (üîΩ) " "$CHARGE"
        fi
    else
        printf "b1: %s%% %s " "$CHARGE" "$STATUS"
    fi
}

dwm_battery0() {
    CHARGE=$(cat /sys/class/power_supply/BAT0/capacity)
    STATUS=$(cat /sys/class/power_supply/BAT0/status)
    if [ "$IDENTIFIER" = "unicode" ]; then
        if [ "$STATUS" = "Charging" ]; then
            printf "üîã %s%% (üîº) " "$CHARGE"
        else
            printf "üîã %s%% (üîΩ) " "$CHARGE"
        fi
    else
        printf "b0: %s%% %s " "$CHARGE" "$STATUS"
    fi
}

dwm_cmus() {
    if ps -C cmus > /dev/null; then
        CMUSDATA=$(cmus-remote -Q)
        ARTIST=$(echo "$CMUSDATA" | grep -w '^tag artist' | awk '{gsub("tag artist ", "");print}')
        TRACK=$(echo "$CMUSDATA" | grep -w '^tag title' | awk '{gsub("tag title ", "");print}')
        POSITION=$(echo "$CMUSDATA" | grep -w '^position' | awk '{gsub("position ", "");print}')
        DURATION=$(echo "$CMUSDATA" | grep -w '^duration' | awk '{gsub("duration ", "");print}')
        STATUS=$(echo "$CMUSDATA" | grep -w '^status' | awk '{gsub("status ", "");print}')
        SHUFFLE=$(echo "$CMUSDATA" | grep -w '^set shuffle' | awk '{gsub("set shuffle ", "");print}')

        if [ "$IDENTIFIER" = "unicode" ]; then
            if [ "$STATUS" = "playing" ]; then
                STATUS="‚ñ∂"
            else
                STATUS="‚è∏"
            fi

            if [ "$SHUFFLE" = "true" ]; then
                SHUFFLE=" üîÄ"
            else
                SHUFFLE=""
            fi
        else
            if [ "$STATUS" = "playing" ]; then
                STATUS="PLA"
            else
                STATUS="PAU"
            fi

            if [ "$SHUFFLE" = "true" ]; then
                SHUFFLE=" S"
            else
                SHUFFLE=""
            fi
        fi
        
        printf "%s %s - %s " "$STATUS" "$ARTIST" "$TRACK"
        printf "%0d:%02d/" $((POSITION%3600/60)) $((POSITION%60))
        printf "%0d:%02d " $((DURATION%3600/60)) $((DURATION%60))
        printf "%s " "$SHUFFLE"
    else
        # cmus is not active
        echo "cmus n/a"
    fi
}

dwm_date() {
    printf "%s " "$(date "+%Y-%m-%d %H:%M")"
}

dwm_loadavg() {
    LOAD_FIELDS=1,2,3
    LOAD_AVG=$(cut -d " " -f ${LOAD_FIELDS} /proc/loadavg)
    if [ "$IDENTIFIER" = "unicode" ]; then
        printf "‚è± %s " "$LOAD_AVG"
    else
        printf "AVG %s " "$LOAD_AVG"
    fi
}

dwm_networkmanager() {
    CONNAME=$(nmcli -a | grep 'Wired connection' | awk 'NR==1{print $1}')
    if [ "$CONNAME" = "" ]; then
        CONNAME=$(nmcli -t -f active,ssid dev wifi | grep '^yes' | cut -c 5-)
    fi

    PRIVATE=$(nmcli -a | grep 'inet4 192' | awk '{print $2}')
    PUBLIC=$(curl -s https://ipinfo.io/ip)

    if [ "$IDENTIFIER" = "unicode" ]; then
        printf "üåê %s %s " "$CONNAME" "$PUBLIC"
    else
        printf "NET %s %s " "$CONNAME" "$PUBLIC"
    fi
}

dwm_pulse() {
    VOL=$(pamixer --get-volume)
    STATE=$(pamixer --get-mute)
    
    if [ "$IDENTIFIER" = "unicode" ]; then
        if [ "$STATE" = "true" ] || [ "$VOL" -eq 0 ]; then
            printf "üîá"
        elif [ "$VOL" -gt 0 ] && [ "$VOL" -le 33 ]; then
            printf "üîâ %s%% " "$VOL"
        elif [ "$VOL" -gt 33 ] && [ "$VOL" -le 66 ]; then
            printf "üîä %s%% " "$VOL"
        else
            printf "üîä %s%% " "$VOL"
        fi
    else
        if [ "$STATE" = "true" ] || [ "$VOL" -eq 0 ]; then
            printf "MUTE"
        elif [ "$VOL" -gt 0 ] && [ "$VOL" -le 33 ]; then
            printf "VOL %s%% " "$VOL"
        elif [ "$VOL" -gt 33 ] && [ "$VOL" -le 66 ]; then
            printf "üîä %s%% " "$VOL"
        else
            printf "üîä %s%% " "$VOL"
        fi
    fi
}

dwm_resources() {
    # Get memory and disk usage
    free_output=$(free -h | grep Mem)
    df_output=$(df -h /home | tail -n 1)
    
    # Extract relevant information
    ram_used=$(echo "$free_output" | awk '{print $3}')
    ram_total=$(echo "$free_output" | awk '{print $2}')
    disk_used=$(echo "$df_output" | awk '{print $3}')
    disk_total=$(echo "$df_output" | awk '{print $2}')
    
    # Print with Unicode symbols (or Font Awesome icons if supported)
    printf "üß† RAM: %s/%s " "$ram_used" "$ram_total"
    printf "üíæ DISK: %s/%s\n" "$disk_used" "$disk_total"
}

dwm_spotify() {
    # Check if Spotify or Spotifyd is running
    if ps -C spotify > /dev/null; then
        PLAYER="spotify"
    elif ps -C spotifyd > /dev/null; then
        PLAYER="spotifyd"
    else
        # Neither Spotify nor Spotifyd is running
        echo "spotify n/a"
        return
    fi

    # If a player is detected
    if [ "$PLAYER" = "spotify" ] || [ "$PLAYER" = "spotifyd" ]; then
        ARTIST=$(playerctl metadata artist)
        TRACK=$(playerctl metadata title)
        POSITION=$(playerctl position | sed 's/..\{6\}$//')
        DURATION=$(playerctl metadata mpris:length | sed 's/.\{6\}$//')
        STATUS=$(playerctl status)
        SHUFFLE=$(playerctl shuffle)

        # Define symbols for status and shuffle
        if [ "$IDENTIFIER" = "unicode" ]; then
            if [ "$STATUS" = "Playing" ]; then
                STATUS="‚ñ∂"  # Play
            else
                STATUS="‚è∏"  # Pause
            fi

            if [ "$SHUFFLE" = "On" ]; then
                SHUFFLE=" üîÄ"  # Shuffle
            else
                SHUFFLE=""
            fi
        else
            if [ "$STATUS" = "Playing" ]; then
                STATUS="PLA"  # Play (text representation)
            else
                STATUS="PAU"  # Pause (text representation)
            fi

            if [ "$SHUFFLE" = "On" ]; then
                SHUFFLE=" S"  # Shuffle (text representation)
            else
                SHUFFLE=""
            fi
        fi

        if [ "$PLAYER" = "spotify" ]; then
            printf "%s%s %s - %s " "$SEP1" "$STATUS" "$ARTIST" "$TRACK"
            printf "%0d:%02d" $((DURATION%3600/60)) $((DURATION%60))
            printf "%s\n" "$SEP2"
        else
            printf "%s%s %s - %s " "$SEP1" "$STATUS" "$ARTIST" "$TRACK"
            printf "%0d:%02d/" $((POSITION%3600/60)) $((POSITION%60))
            printf "%0d:%02d" $((DURATION%3600/60)) $((DURATION%60))
            printf "%s%s\n" "$SHUFFLE" "$SEP2"
        fi
    fi
}

# Main script loop - uncomment what you want to be displayed
while true; do
    STATUS_OUTPUT=""
    STATUS_OUTPUT+=$(dwm_alsa)
    #STATUS_OUTPUT+=" | $(dwm_backlight)"
    #STATUS_OUTPUT+=" | $(dwm_battery1)"
    #STATUS_OUTPUT+=" | $(dwm_battery0)"
    STATUS_OUTPUT+=" | $(dwm_cmus)"
    STATUS_OUTPUT+=" | $(dwm_spotify)"
    #STATUS_OUTPUT+=" | $(dwm_loadavg)"
    #STATUS_OUTPUT+=" | $(dwm_networkmanager)"
    #STATUS_OUTPUT+=" | $(dwm_pulse)"
    STATUS_OUTPUT+=" | $(dwm_resources)"
    STATUS_OUTPUT+=" | $(dwm_date)"

    # Set the root window text
    xsetroot -name "$STATUS_OUTPUT"

    sleep 2
done
