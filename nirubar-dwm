#!/bin/sh

# Status bar for dwm using xsetroot by Nicklas Rudolfsson
# https://github.com/nirucon
# Dependencies: xorg-xsetroot, alsa-utils, xbacklight, cmus, curl, playerctl, ttf-font-awesome, pamixer, nextcloud-client

# Change the appearance of the module identifier
export IDENTIFIER="unicode"

# Change the characters that can be used to separate in or between modules
export SPRL=" [ "
export SPRR=" ] "

# Define functions for each module

module_alsa() {
    STATUS=$(amixer sget Master | tail -n1 | sed -r "s/.*\[(.*)\]/\1/")
    VOL=$(amixer get Master | tail -n1 | sed -r "s/.*\[(.*)%\].*/\1/")
    if [ "$IDENTIFIER" = "unicode" ]; then
        if [ "$STATUS" = "off" ]; then
            printf "🔇"
        else
            if [ "$VOL" -gt 0 ] && [ "$VOL" -le 33 ]; then
                printf "🔉 %s%%" "$VOL"
            elif [ "$VOL" -gt 33 ] && [ "$VOL" -le 66 ]; then
                printf "🔊 %s%%" "$VOL"
            else
                printf "🔊 %s%%" "$VOL"
            fi
        fi
    else
        if [ "$STATUS" = "off" ]; then
            printf "MUTE"
        else
            if [ "$VOL" -gt 0 ] && [ "$VOL" -le 33 ]; then
                printf "v: %s%%" "$VOL"
            elif [ "$VOL" -gt 33 ] && [ "$VOL" -le 66 ]; then
                printf "v: %s%%" "$VOL"
            else
                printf "v: %s%%" "$VOL"
            fi
        fi
    fi
}

module_backlight() {
    printf "bl: %.0f " "$(xbacklight)"
}

module_battery() {
    local BAT_PATH=$1
    local BAT_LABEL=$2
    CHARGE=$(cat "$BAT_PATH/capacity")
    STATUS=$(cat "$BAT_PATH/status")
    if [ "$IDENTIFIER" = "unicode" ]; then
        if [ "$STATUS" = "Charging" ]; then
            printf "🔋 %s%% (🔼) " "$CHARGE"
        else
            printf "🔋 %s%% (🔽) " "$CHARGE"
        fi
    else
        printf "%s: %s%% %s " "$BAT_LABEL" "$CHARGE" "$STATUS"
    fi
}

module_cmus() {
    if ps -C cmus > /dev/null; then
        CMUSDATA=$(cmus-remote -Q)
        ARTIST=$(echo "$CMUSDATA" | grep -w '^tag artist' | awk '{gsub("tag artist ", "");print}')
        TRACK=$(echo "$CMUSDATA" | grep -w '^tag title' | awk '{gsub("tag title ", "");print}')
        POSITION=$(echo "$CMUSDATA" | grep -w '^position' | awk '{gsub("position ", "");print}')
        DURATION=$(echo "$CMUSDATA" | grep -w '^duration' | awk '{gsub("duration ", "");print}')
        STATUS=$(echo "$CMUSDATA" | grep -w '^status' | awk '{gsub("status ", "");print}')
        SHUFFLE=$(echo "$CMUSDATA" | grep -w '^set shuffle' | awk '{gsub("set shuffle ", "");print}')

        if [ "$IDENTIFIER" = "unicode" ]; then
            if [ "$STATUS" = "playing" ]; then
                STATUS="▶"
            else
                STATUS="⏸"
            fi

            if [ "$SHUFFLE" = "true" ]; then
                SHUFFLE=" 🔀"
            else
                SHUFFLE=""
            fi
        else
            if [ "$STATUS" = "playing" ]; then
                STATUS="PLA"
            else
                STATUS="PAU"
            fi

            if [ "$SHUFFLE" = "true" ]; then
                SHUFFLE=" S"
            else
                SHUFFLE=""
            fi
        fi
        
        printf "%s %s - %s " "$STATUS" "$ARTIST" "$TRACK"
        printf "%0d:%02d/" $((POSITION%3600/60)) $((POSITION%60))
        printf "%0d:%02d " $((DURATION%3600/60)) $((DURATION%60))
        printf "%s " "$SHUFFLE"
    else
        # cmus is not active
        echo "cmus n/a"
    fi
}

module_date() {
    printf "%s " "$(date "+%Y-%m-%d %H:%M")"
}

module_loadavg() {
    LOAD_FIELDS=1,2,3
    LOAD_AVG=$(cut -d " " -f ${LOAD_FIELDS} /proc/loadavg)
    if [ "$IDENTIFIER" = "unicode" ]; then
        printf "⏱ %s " "$LOAD_AVG"
    else
        printf "AVG %s " "$LOAD_AVG"
    fi
}

module_networkmanager() {
    CONNAME=$(nmcli -a | grep 'Wired connection' | awk 'NR==1{print $1}')
    if [ "$CONNAME" = "" ]; then
        CONNAME=$(nmcli -t -f active,ssid dev wifi | grep '^yes' | cut -c 5-)
    fi

    PRIVATE=$(nmcli -a | grep 'inet4 192' | awk '{print $2}')
    PUBLIC=$(curl -s https://ipinfo.io/ip)

    if [ "$IDENTIFIER" = "unicode" ]; then
        printf "🌐 %s %s " "$CONNAME" "$PUBLIC"
    else
        printf "NET %s %s " "$CONNAME" "$PUBLIC"
    fi
}

module_pulse() {
    VOL=$(pamixer --get-volume)
    STATE=$(pamixer --get-mute)
    
    if [ "$IDENTIFIER" = "unicode" ]; then
        if [ "$STATE" = "true" ] || [ "$VOL" -eq 0 ]; then
            printf "🔇"
        elif [ "$VOL" -gt 0 ] && [ "$VOL" -le 33 ]; then
            printf "🔉 %s%% " "$VOL"
        elif [ "$VOL" -gt 33 ] && [ "$VOL" -le 66 ]; then
            printf "🔊 %s%% " "$VOL"
        else
            printf "🔊 %s%% " "$VOL"
        fi
    else
        if [ "$STATE" = "true" ] || [ "$VOL" -eq 0 ]; then
            printf "MUTE"
        elif [ "$VOL" -gt 0 ] && [ "$VOL" -le 33 ]; then
            printf "VOL %s%% " "$VOL"
        elif [ "$VOL" -gt 33 ] && [ "$VOL" -le 66 ]; then
            printf "🔊 %s%% " "$VOL"
        else
            printf "🔊 %s%% " "$VOL"
        fi
    fi
}

module_resources() {
    # Get memory and disk usage
    free_output=$(free -h | grep Mem)
    df_output=$(df -h /home | tail -n 1)
    
    # Extract relevant information
    ram_used=$(echo "$free_output" | awk '{print $3}')
    ram_total=$(echo "$free_output" | awk '{print $2}')
    disk_used=$(echo "$df_output" | awk '{print $3}')
    disk_total=$(echo "$df_output" | awk '{print $2}')
    
    # Print with Unicode symbols (or Font Awesome icons if supported)
    printf "🧠 RAM: %s/%s " "$ram_used" "$ram_total"
    printf "💾 DISK: %s/%s\n" "$disk_used" "$disk_total"
}

module_spotify() {
    # Check if Spotify or Spotifyd is running
    if ps -C spotify > /dev/null; then
        PLAYER="spotify"
    elif ps -C spotifyd > /dev/null; then
        PLAYER="spotifyd"
    else
        # Neither Spotify nor Spotifyd is running
        echo "spotify n/a"
        return
    fi

    # If a player is detected
    if [ "$PLAYER" = "spotify" ] || [ "$PLAYER" = "spotifyd" ]; then
        ARTIST=$(playerctl metadata artist)
        TRACK=$(playerctl metadata title)
        POSITION=$(playerctl position | sed 's/..\{6\}$//')
        DURATION=$(playerctl metadata mpris:length | sed 's/.\{6\}$//')
        STATUS=$(playerctl status)
        SHUFFLE=$(playerctl shuffle)

        # Define symbols for status and shuffle
        if [ "$IDENTIFIER" = "unicode" ]; then
            if [ "$STATUS" = "Playing" ]; then
                STATUS="▶"  # Play
            else
                STATUS="⏸"  # Pause
            fi

            if [ "$SHUFFLE" = "On" ]; then
                SHUFFLE=" 🔀"  # Shuffle
            else
                SHUFFLE=""
            fi
        else
            if [ "$STATUS" = "Playing" ]; then
                STATUS="PLA"  # Play (text representation)
            else
                STATUS="PAU"  # Pause (text representation)
            fi

            if [ "$SHUFFLE" = "On" ]; then
                SHUFFLE=" S"  # Shuffle (text representation)
            else
                SHUFFLE=""
            fi
        fi

        if [ "$PLAYER" = "spotify" ]; then
            printf "%s%s %s - %s " "$SPRL" "$STATUS" "$ARTIST" "$TRACK"
            printf "%0d:%02d" $((DURATION%3600/60)) $((DURATION%60))
            printf "%s\n" "$SPRR"
        else
            printf "%s%s %s - %s " "$SPRL" "$STATUS" "$ARTIST" "$TRACK"
            printf "%0d:%02d/" $((POSITION%3600/60)) $((POSITION%60))
            printf "%0d:%02d" $((DURATION%3600/60)) $((DURATION%60))
            printf "%s%s\n" "$SHUFFLE" "$SPRR"
        fi
    fi
}

module_updates() {
    CURRENT_TIME=$(date +%s)
    LAST_UPDATE_TIME=$(cat "$UPDATE_TIMESTAMP_FILE" 2>/dev/null || echo 0)
    
    # Interval in seconds (30 minutes)
    UPDATE_INTERVAL=$((30 * 60))

    # Function to perform update check
    check_for_updates() {
        PAC=$(checkupdates 2>/dev/null | wc -l)
        AUR=$(yay -Qua 2>/dev/null | wc -l)
        echo "$CURRENT_TIME" > "$UPDATE_TIMESTAMP_FILE"
        echo "PAC: $PAC AUR: $AUR" > "$UPDATE_TIMESTAMP_FILE.output"
        printf "PAC: %s AUR: %s" "$PAC" "$AUR"
    }

    # Check for updates at the start and at intervals
    if [ $(($CURRENT_TIME - $LAST_UPDATE_TIME)) -ge $UPDATE_INTERVAL ]; then
        check_for_updates
    else
        # Use the previously stored output if within the interval
        PREVIOUS_OUTPUT=$(cat "$UPDATE_TIMESTAMP_FILE.output" 2>/dev/null || echo "PAC: ? AUR: ?")
        printf "%s" "$PREVIOUS_OUTPUT"
    fi
}

module_nextcloud() {
    if command -v nextcloud &> /dev/null; then
        STATUS=$(nextcloud --status | grep 'status:' | awk '{print $2}')
        if [ "$IDENTIFIER" = "unicode" ]; then
            if [ "$STATUS" = "online" ]; then
                printf "🟢 NC: online"
            else
                printf "🔴 NC: offline"
            fi
        else
            if [ "$STATUS" = "online" ]; then
                printf "NC: online"
            else
                printf "NC: offline"
            fi
        fi
    else
        # Nextcloud is not installed
        echo "NC: n/a"
    fi
}

is_laptop() {
    [ -d /sys/class/power_supply/BAT0 ] || [ -d /sys/class/power_supply/BAT1 ]
}

# Main script loop - comment/uncomment what you want to be displayed
while true; do
    STATUS_OUTPUT=""
    STATUS_OUTPUT+="| $(module_alsa)"
    #STATUS_OUTPUT+=" | $(module_backlight)"
    if is_laptop; then
        [ -d /sys/class/power_supply/BAT0 ] && STATUS_OUTPUT+=" | $(module_battery /sys/class/power_supply/BAT0 BAT0)"
        [ -d /sys/class/power_supply/BAT1 ] && STATUS_OUTPUT+=" | $(module_battery /sys/class/power_supply/BAT1 BAT1)"
    fi
    STATUS_OUTPUT+=" | $(module_cmus)"
    STATUS_OUTPUT+=" | $(module_spotify)"
    #STATUS_OUTPUT+=" | $(module_loadavg)"
    #STATUS_OUTPUT+=" | $(module_networkmanager)"
    #STATUS_OUTPUT+=" | $(module_pulse)"
    STATUS_OUTPUT+=" | $(module_resources)"
    STATUS_OUTPUT+=" | $(module_updates)"
    STATUS_OUTPUT+=" | $(module_nextcloud)"
    STATUS_OUTPUT+=" | $(module_date)"

    # Set the root window text
    xsetroot -name "$STATUS_OUTPUT"

    sleep 2
done
