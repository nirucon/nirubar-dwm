#!/bin/sh

# Status bar for dwm by Nicklas Rudolfsson
# https://github.com/nirucon

# Dependencies: xorg-xsetroot, alsa-utils, xbacklight, cmus, curl, playerctl

# Store the directory the script is running from
LOC=$(readlink -f "$0")
DIR=$(dirname "$LOC")

# Change the appearance of the module identifier
export IDENTIFIER="unicode"

# Change the character(s) used to separate modules.
export SEP1=" [ "
export SEP2=" ] "

# Define functions for each module

dwm_alsa() {
    STATUS=$(amixer sget Master | tail -n1 | sed -r "s/.*\[(.*)\]/\1/")
    VOL=$(amixer get Master | tail -n1 | sed -r "s/.*\[(.*)%\].*/\1/")
    printf "%s" "$SEP1"
    if [ "$IDENTIFIER" = "unicode" ]; then
        if [ "$STATUS" = "off" ]; then
            printf "üîá"
        else
            if [ "$VOL" -gt 0 ] && [ "$VOL" -le 33 ]; then
                printf "üîâ %s%%" "$VOL"
            elif [ "$VOL" -gt 33 ] && [ "$VOL" -le 66 ]; then
                printf "üîä %s%%" "$VOL"
            else
                printf "üîä %s%%" "$VOL"
            fi
        fi
    else
        if [ "$STATUS" = "off" ]; then
            printf "MUTE"
        else
            if [ "$VOL" -gt 0 ] && [ "$VOL" -le 33 ]; then
                printf "v: %s%%" "$VOL"
            elif [ "$VOL" -gt 33 ] && [ "$VOL" -le 66 ]; then
                printf "v: %s%%" "$VOL"
            else
                printf "v: %s%%" "$VOL"
            fi
        fi
    fi
    printf "%s\n" "$SEP2"
}

dwm_backlight() {
    printf "%s bl: %.0f%s\n" "$SEP1" "$(xbacklight)" "$SEP2"
}

dwm_battery1() {
    CHARGE=$(cat /sys/class/power_supply/BAT1/capacity)
    STATUS=$(cat /sys/class/power_supply/BAT1/status)
    printf "%s" "$SEP1"
    if [ "$IDENTIFIER" = "unicode" ]; then
        if [ "$STATUS" = "Charging" ]; then
            printf "üîã %s%% (üîº)" "$CHARGE"
        else
            printf "üîã %s%% (üîΩ)" "$CHARGE"
        fi
    else
        printf "b1: %s%% %s" "$CHARGE" "$STATUS"
    fi
    printf "%s\n" "$SEP2"
}

dwm_battery0() {
    CHARGE=$(cat /sys/class/power_supply/BAT0/capacity)
    STATUS=$(cat /sys/class/power_supply/BAT0/status)
    printf "%s" "$SEP1"
    if [ "$IDENTIFIER" = "unicode" ]; then
        if [ "$STATUS" = "Charging" ]; then
            printf "üîã %s%% (üîº)" "$CHARGE"
        else
            printf "üîã %s%% (üîΩ)" "$CHARGE"
        fi
    else
        printf "b2: %s%% %s" "$CHARGE" "$STATUS"
    fi
    printf "%s\n" "$SEP2"
}

dwm_cmus() {
    if ps -C cmus > /dev/null; then
        CMUSDATA=$(cmus-remote -Q)
        ARTIST=$(echo "$CMUSDATA" | grep -w '^tag artist' | awk '{gsub("tag artist ", "");print}')
        TRACK=$(echo "$CMUSDATA" | grep -w '^tag title' | awk '{gsub("tag title ", "");print}')
        POSITION=$(echo "$CMUSDATA" | grep -w '^position' | awk '{gsub("position ", "");print}')
        DURATION=$(echo "$CMUSDATA" | grep -w '^duration' | awk '{gsub("duration ", "");print}')
        STATUS=$(echo "$CMUSDATA" | grep -w '^status' | awk '{gsub("status ", "");print}')
        SHUFFLE=$(echo "$CMUSDATA" | grep -w '^set shuffle' | awk '{gsub("set shuffle ", "");print}')

        if [ "$IDENTIFIER" = "unicode" ]; then
            if [ "$STATUS" = "playing" ]; then
                STATUS="‚ñ∂"
            else
                STATUS="‚è∏"
            fi

            if [ "$SHUFFLE" = "true" ]; then
                SHUFFLE=" üîÄ"
            else
                SHUFFLE=""
            fi
        else
            if [ "$STATUS" = "playing" ]; then
                STATUS="PLA"
            else
                STATUS="PAU"
            fi

            if [ "$SHUFFLE" = "true" ]; then
                SHUFFLE=" S"
            else
                SHUFFLE=""
            fi
        fi
        
        printf "%s%s %s - %s " "$SEP1" "$STATUS" "$ARTIST" "$TRACK"
        printf "%0d:%02d/" $((POSITION%3600/60)) $((POSITION%60))
        printf "%0d:%02d" $((DURATION%3600/60)) $((DURATION%60))
        printf "%s%s\n" "$SHUFFLE" "$SEP2"
    fi
}

dwm_date() {
    printf "%s" "$SEP1"
    if [ "$IDENTIFIER" = "unicode" ]; then
        printf "%s" "$(date "+%Y-%m-%d %H:%M")"
    else
        printf "%s" "$(date "+%Y-%m-%d %H:%M")"
    fi
    printf "%s\n" "$SEP2"
}

dwm_loadavg() {
    LOAD_FIELDS=1,2,3
    LOAD_AVG=$(cut -d " " -f ${LOAD_FIELDS} /proc/loadavg)
    printf "%s" "$SEP1"
    if [ "$IDENTIFIER" = "unicode" ]; then
        printf "‚è± %s" "$LOAD_AVG"
    else
        printf "AVG %s" "$LOAD_AVG"
    fi
    printf "%s\n" "$SEP2"
}

dwm_networkmanager() {
    CONNAME=$(nmcli -a | grep 'Wired connection' | awk 'NR==1{print $1}')
    if [ "$CONNAME" = "" ]; then
        CONNAME=$(nmcli -t -f active,ssid dev wifi | grep '^yes' | cut -c 5-)
    fi

    PRIVATE=$(nmcli -a | grep 'inet4 192' | awk '{print $2}')
    PUBLIC=$(curl -s https://ipinfo.io/ip)

    if [ "$IDENTIFIER" = "unicode" ]; then
        export __DWM_BAR_NETWORKMANAGER__="${SEP1}üåê ${CONNAME} ${PRIVATE} ${PUBLIC}${SEP2}"
    else
        export __DWM_BAR_NETWORKMANAGER__="${SEP1}NET ${CONNAME} ${PRIVATE} ${PUBLIC}${SEP2}"
    fi
}

dwm_pulse() {
    VOL=$(pamixer --get-volume)
    STATE=$(pamixer --get-mute)
    
    printf "%s" "$SEP1"
    if [ "$IDENTIFIER" = "unicode" ]; then
        if [ "$STATE" = "true" ] || [ "$VOL" -eq 0 ]; then
            printf "üîá"
        elif [ "$VOL" -gt 0 ] && [ "$VOL" -le 33 ]; then
            printf "üîâ %s%%" "$VOL"
        elif [ "$VOL" -gt 33 ] && [ "$VOL" -le 66 ]; then
            printf "üîä %s%%" "$VOL"
        else
            printf "üîä %s%%" "$VOL"
        fi
    else
        if [ "$STATE" = "true" ] || [ "$VOL" -eq 0 ]; then
            printf "MUTE"
        elif [ "$VOL" -gt 0 ] && [ "$VOL" -le 33 ]; then
            printf "VOL %s%%" "$VOL"
        elif [ "$VOL" -gt 33 ] && [ "$VOL" -le 66 ]; then
            printf "üîä %s%%" "$VOL"
        else
            printf "üîä %s%%" "$VOL"
        fi
    fi
    printf "%s\n" "$SEP2"
}

dwm_resources() {
    free_output=$(free -h | grep Mem)
    df_output=$(df -h /home | tail -n 1)
    printf "%s" "$SEP1"
    if [ "$IDENTIFIER" = "unicode" ]; then
        printf "RAM: %s/%s  " $(echo "$free_output" | awk '{print $3}') $(echo "$free_output" | awk '{print $2}')
        printf "DISK: %s/%s" $(echo "$df_output" | awk '{print $3}') $(echo "$df_output" | awk '{print $2}')
    else
        printf "RAM: %s/%s  " $(echo "$free_output" | awk '{print $3}') $(echo "$free_output" | awk '{print $2}')
        printf "DISK: %s/%s" $(echo "$df_output" | awk '{print $3}') $(echo "$df_output" | awk '{print $2}')
    fi
    printf "%s\n" "$SEP2"
}

# Main script loop
while true; do
    dwm_alsa
    dwm_backlight
    dwm_battery1
    dwm_battery0
    dwm_cmus
    dwm_date
    dwm_loadavg
    dwm_networkmanager
    dwm_pulse
    dwm_resources

    sleep 5
done
